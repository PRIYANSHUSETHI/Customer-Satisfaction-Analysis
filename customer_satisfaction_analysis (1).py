# -*- coding: utf-8 -*-
"""Customer Satisfaction Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZFgQtx_A23AA1Bx7AROSS-FfWQ7ntqal
"""

import pandas as pd
data = pd.read_csv("/content/E-commerce_NPA_Dataset.csv")

print(data.head())

print(data.describe())

"""
The summary statistics shed light on key aspects of the dataset, including central tendency, variability, and distribution of numerical values. Notable insights include:

1) **Age**: Customers have an average age of approximately 44 years, spanning from 18 to 69 years.

2) **Purchase Amount**: The mean purchase amount is $1,065, with a high standard deviation, reflecting wide differences in spending behavior.

3) **Purchase Frequency**: On average, customers make about 14 purchases, with the most active reaching up to 29.

4) **Ratings**: Average scores across product quality, delivery time, customer service, and website usability hover around 3 out of 5, indicating moderate satisfaction. Ratings vary from 1 (poor) to 5 (excellent).

5) **Return Rate**: The average return rate stands at 25%, with some customers returning up to 50% of their purchases.

6) **Discount Usage**: Customers use an average of $251 in discounts, with substantial variability across the dataset.
"""

import matplotlib.pyplot as plt

numeric_cols = ['Age', 'PurchaseAmount', 'PurchaseFrequency', 'ProductQualityRating', 'DeliveryTimeRating', 'CustomerServiceRating', 'WebsiteEaseOfUseRating', 'ReturnRate', 'DiscountUsage']

plt.figure(figsize=(15, 20))

for i, col in enumerate(numeric_cols, 1):
    plt.subplot(5, 2, i)
    plt.hist(data[col], bins=20, edgecolor='k', alpha=0.7)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

"""The histograms provide valuable insights into customer demographics and satisfaction metrics:

- **Age Distribution**: Fairly uniform, with noticeable concentrations in the 30s and 60s age groups.
- **Purchase Amounts**: Right-skewed, suggesting that the majority of customers spend under $1,000.
- **Purchase Frequency**: Shows variation, with distinct peaks around 10 and 20 purchases.
- **Satisfaction Ratings**: Ratings for product quality, delivery time, customer service, and website usability are broadly distributed, though most tend to cluster around the midpoint, reflecting moderate satisfaction levels.
- **Return Rates**: Display a bimodal pattern, with peaks around 0.1 and 0.4.
- **Discount Usage**: Evenly distributed across the customer base, indicating no clear pattern in discount utilization.

"""

# create age groups
bins = [18, 30, 40, 50, 60, 70]
labels = ['18-29', '30-39', '40-49', '50-59', '60-69']
data['AgeGroup'] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)

# select only the numeric columns for calculation
numeric_columns = ['ProductQualityRating', 'DeliveryTimeRating', 'CustomerServiceRating', 'WebsiteEaseOfUseRating']

# calculate mean ratings by age group and gender
mean_ratings_age_gender = data.groupby(['AgeGroup', 'Gender'])[numeric_columns].mean()

# reset the index to display the dataframe
mean_ratings_age_gender.reset_index(inplace=True)
print(mean_ratings_age_gender)

"""The data reveals average satisfaction ratings by age group and gender across various service aspects. Key insights include:

- **Product Quality**: Younger customers (18–29) tend to rate product quality slightly higher than other age groups.
- **Overall Satisfaction**: Females aged 40–49 provide the highest overall satisfaction ratings, while males aged 60–69 report the lowest.
- **Delivery Time**: Satisfaction with delivery time remains relatively stable across age groups, with subtle differences. The highest ratings come from females aged 60–69, while the lowest are from males aged 30–39.
- **Customer Service**: Ratings are generally consistent, with a modest peak among younger males (18–29). In contrast, males aged 60–69 express the lowest satisfaction in this category.

"""

# select only the numeric columns for calculation
numeric_columns = ['ProductQualityRating', 'DeliveryTimeRating', 'CustomerServiceRating', 'WebsiteEaseOfUseRating', 'ReturnRate', 'DiscountUsage']

# calculate mean ratings by loyalty program membership
mean_ratings_loyalty = data.groupby('LoyaltyProgramMember')[numeric_columns].mean()

# reset the index to display the dataframe
mean_ratings_loyalty.reset_index(inplace=True)
print(mean_ratings_loyalty)

"""The data compares average satisfaction ratings, return rates, and discount usage between loyalty program members and non-members. Key observations include:

- **Product Quality**: Members rate product quality slightly higher (2.95) than non-members (2.92).
- **Delivery Time**: Loyalty program members express greater satisfaction (3.09) compared to non-members (2.92).
- **Customer Service**: Members also rate customer service more favorably (3.16) than non-members (2.99).
- **Website Ease of Use**: Interestingly, non-members give slightly higher ratings (3.11) than members (3.06).
- **Return Rate**: Return rates are virtually identical for both groups, averaging 0.25.
- **Discount Usage**: Members tend to utilize more discounts on average ($260) than non-members ($241).
"""

# define NPS categories based on customer service rating
data['NPS_Category'] = pd.cut(data['CustomerServiceRating'], bins=[0, 6, 8, 10], labels=['Detractors', 'Passives', 'Promoters'], right=False)

# calculate NPS
nps_counts = data['NPS_Category'].value_counts(normalize=True) * 100
nps_score = nps_counts['Promoters'] - nps_counts['Detractors']

nps_counts

nps_score

"""The NPS calculation shows:

Detractors: 100% of customers fall into the Detractors category.

Passives: 0%

Promoters: 0%

---
Root Cause Analysis for Low Satisfaction

---
"""

# define low rating threshold
low_rating_threshold = 2

# create subsets for low ratings in different aspects
low_product_quality = data[data['ProductQualityRating'] <= low_rating_threshold]
low_delivery_time = data[data['DeliveryTimeRating'] <= low_rating_threshold]
low_customer_service = data[data['CustomerServiceRating'] <= low_rating_threshold]
low_website_ease_of_use = data[data['WebsiteEaseOfUseRating'] <= low_rating_threshold]

# plot the characteristics for each low rating subset
plt.figure(figsize=(20, 15))

# age distribution for low ratings
plt.subplot(2, 2, 1)
plt.hist([low_product_quality['Age'], low_delivery_time['Age'], low_customer_service['Age'], low_website_ease_of_use['Age']], bins=10, label=['Product Quality', 'Delivery Time', 'Customer Service', 'Website Ease of Use'])
plt.title('Age Distribution for Low Ratings')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.legend()

# purchase amount distribution for low ratings
plt.subplot(2, 2, 2)
plt.hist([low_product_quality['PurchaseAmount'], low_delivery_time['PurchaseAmount'], low_customer_service['PurchaseAmount'], low_website_ease_of_use['PurchaseAmount']], bins=10, label=['Product Quality', 'Delivery Time', 'Customer Service', 'Website Ease of Use'])
plt.title('Purchase Amount Distribution for Low Ratings')
plt.xlabel('Purchase Amount')
plt.ylabel('Frequency')
plt.legend()

# purchase frequency distribution for low ratings
plt.subplot(2, 2, 3)
plt.hist([low_product_quality['PurchaseFrequency'], low_delivery_time['PurchaseFrequency'], low_customer_service['PurchaseFrequency'], low_website_ease_of_use['PurchaseFrequency']], bins=10, label=['Product Quality', 'Delivery Time', 'Customer Service', 'Website Ease of Use'])
plt.title('Purchase Frequency Distribution for Low Ratings')
plt.xlabel('Purchase Frequency')
plt.ylabel('Frequency')
plt.legend()

# return rate distribution for low ratings
plt.subplot(2, 2, 4)
plt.hist([low_product_quality['ReturnRate'], low_delivery_time['ReturnRate'], low_customer_service['ReturnRate'], low_website_ease_of_use['ReturnRate']], bins=10, label=['Product Quality', 'Delivery Time', 'Customer Service', 'Website Ease of Use'])
plt.title('Return Rate Distribution for Low Ratings')
plt.xlabel('Return Rate')
plt.ylabel('Frequency')
plt.legend()

plt.tight_layout()
plt.show()

"""The histograms highlight key factors contributing to low customer satisfaction across various service aspects:

- **Age Distribution**: Low ratings are observed across a broad age spectrum, with noticeable peaks among customers aged 30–40 and 50–60, indicating potential age-related dissatisfaction patterns.
- **Purchase Behavior**: Both high and low spenders, as well as frequent and infrequent buyers, report low satisfaction. This suggests that dissatisfaction is not tied to purchase volume but may stem from broader service quality issues.
- **Return Rates**: Elevated return rates are strongly associated with low ratings, especially in categories like product quality and website usability, pointing to dissatisfaction with product performance and digital experience.
"""

# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score

# 1. Interactive Visualizations with Plotly
fig = px.histogram(data, x="PurchaseAmount", nbins=30, title="Interactive Histogram - Purchase Amount",
                   color_discrete_sequence=['indigo'])
fig.show()

fig2 = px.box(data, x="Gender", y="ProductQualityRating", color="Gender", title="Box Plot - Product Quality by Gender",
              color_discrete_sequence=px.colors.qualitative.Set2)
fig2.show()

# 2. Customer Segmentation with K-Means
features = data[["Age", "PurchaseAmount", "PurchaseFrequency", "ReturnRate"]]
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

kmeans = KMeans(n_clusters=4, random_state=42)
data['CustomerSegment'] = kmeans.fit_predict(scaled_features)

fig3 = px.scatter(data, x="PurchaseAmount", y="ReturnRate", color="CustomerSegment",
                  title="Customer Segmentation", hover_data=['Age'], color_continuous_scale='Plasma')
fig3.show()

# 3. Predictive Modeling - Satisfaction Score (Average of 4 ratings)
data['AvgRating'] = data[["ProductQualityRating", "DeliveryTimeRating", "CustomerServiceRating", "WebsiteEaseOfUseRating"]].mean(axis=1)

X = data[["Age", "PurchaseAmount", "PurchaseFrequency", "ReturnRate", "DiscountUsage"]]
y = data["AvgRating"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

predictions = model.predict(X_test)
print("\nR^2 Score:", r2_score(y_test, predictions))
print("Mean Absolute Error:", mean_absolute_error(y_test, predictions))

# Feature Importance
feat_imp = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=True)
plt.figure(figsize=(8,5))
feat_imp.plot(kind='barh', color='teal')
plt.title("Feature Importance for Predicting Satisfaction")
plt.xlabel("Importance Score")
plt.tight_layout()
plt.show()

# 4. Churn Prediction - Define churn as AvgRating < 2.5
data['Churn'] = (data['AvgRating'] < 2.5).astype(int)

# Simple model to predict churn
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(random_state=42)

X = data[["Age", "PurchaseAmount", "PurchaseFrequency", "ReturnRate", "DiscountUsage"]]
y = data["Churn"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
clf.fit(X_train, y_train)

print("\nChurn Prediction Accuracy:", clf.score(X_test, y_test))

# 5. Sentiment-Aware NPS - Simulated for now (replace with real text later)
data['ReviewText'] = ["good experience" if r > 3 else "poor product" for r in data['ProductQualityRating']]

# Dummy sentiment scoring
data['SentimentScore'] = data['ReviewText'].apply(lambda x: 1 if "good" in x else -1)

fig4 = px.violin(data, y="SentimentScore", x="ProductQualityRating", box=True, points="all",
                 title="Sentiment Score by Product Quality Rating", color="ProductQualityRating")
fig4.show()